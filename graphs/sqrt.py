import matplotlib.pyplot as plt
import numpy as np
import math

"""
stl is very fast. It's not worth it to use anything else.

The following table compares the speed and error margin of
different sqrt approxiamtions used in the following formula:
    sqrt(x)

SEC      xSPEED ERROR     NAME
0.055580                  pass
0.060113        0         stl
0.059068        0.075     bigtailwolf
0.102217        0.0000000 nimig18

- pass = no processing
- stl = sqrt(x)
- xSpeed of the sqrt function calculated: (stl - pass) / (other_sec - pass)
- Error is is taken at the worst point within +/- Ï€, excexpt for the full sine
  function, where is error is taken anywhere that looks bad
"""



stl = [0.000000000000,0.316227763891,0.447213590145,0.547722578049,0.632455527782,0.707106769085,0.774596691132,0.836660027504,0.894427180290,0.948683261871,1.000000000000,1.048808813095,1.095445156097,1.140175461769,1.183215975761,1.224744915962,1.264911055565,1.303840517998,1.341640710831,1.378404855728,1.414213538170,1.449137687683,1.483239769936,1.516575098038,1.549193382263,1.581138849258,1.612451553345,1.643167734146,1.673320055008,1.702938675880,1.732050776482,1.760681629181,1.788854360580,1.816590189934,1.843908905983,1.870828747749,1.897366523743,1.923538446426,1.949358820915,1.974841833115,2.000000000000,]
bigtailwolf = [0.000000000000,0.324999988079,0.449999988079,0.550000011921,0.649999976158,0.750000000000,0.800000011921,0.849999964237,0.899999976158,0.949999988079,1.000000000000,1.049999952316,1.100000023842,1.149999976158,1.199999928474,1.250000000000,1.299999952316,1.350000023842,1.399999976158,1.449999928474,1.500000000000,1.524999976158,1.549999952316,1.574999928474,1.600000023842,1.625000000000,1.649999976158,1.674999952316,1.699999928474,1.725000023842,1.750000000000,1.774999976158,1.799999952316,1.824999928474,1.850000023842,1.875000000000,1.899999976158,1.924999952316,1.949999928474,1.975000023842,2.000000000000,]
nimig18 = [0.000000000000,0.316227734089,0.447213560343,0.547722518444,0.632455468178,0.707106769085,0.774596631527,0.836659967899,0.894427120686,0.948683202267,1.000000000000,1.048808813095,1.095445036888,1.140175342560,1.183215856552,1.224744796753,1.264910936356,1.303840398788,1.341640591621,1.378404736519,1.414213538170,1.449137568474,1.483239650726,1.516574978828,1.549193263054,1.581138730049,1.612451314926,1.643167495728,1.673319935799,1.702938556671,1.732050657272,1.760681509972,1.788854241371,1.816589951515,1.843908667564,1.870828509331,1.897366404533,1.923538208008,1.949358582497,1.974841475487,2.000000000000,]

x_labels = [
    0.0,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,
    1.0,  1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,
    2.0,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,
    3.0,  3.1,  3.2,  3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,
    4.0,
]

class Styles:
    idx = 0
    types = ['solid', 'dotted', 'dashed', 'dashdot']

    def get(self):
        s = self.types[self.idx]
        self.idx = (self.idx + 1) & 3
        return s

linestyles = Styles()

fig, ax = plt.subplots()

x_ticks = [i for i in range(len(x_labels))]
x = [i for i in range(len(stl))]

# plt.xlabel('phase 0-1')
plt.xticks(ticks=x_ticks, labels=x_labels)
plt.ylabel('mag')

ax.plot(stl, label='stl', linestyle=linestyles.get())
ax.plot(bigtailwolf, label='bigtailwolf', linestyle=linestyles.get())
ax.plot(nimig18, label='nimig18', linestyle=linestyles.get())

ax.legend()
plt.show()
