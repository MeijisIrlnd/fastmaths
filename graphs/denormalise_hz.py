import matplotlib.pyplot as plt
import numpy as np

"""
Denormalising Hz is often done in graphical contexts.
Errors will result in a pixel being offset a few places,
or just a fraction.
All the fastest pow functions will offset any on screen
value by a few pixels. On small displays this won't be
noticeable, but on large ones it could be.
The standard mineiro function is the only viable fast option
due to its accuracy. Unfortunately the speed improvements are
only minor.
The mineiro_faster can be a good option if the display is
small so as to minimise the effects of the errors.

The following table compares the speed and error margin of
different exp2(x) approxiamtions used in the following formula:
    20 * exp2(normalised * 10)
    20 * pow(2, normalised * 10)

    (alternate) 5 * pow(2, 10 * normalised + 2)


SEC      xSPEED ERROR  NAME
0.055390               pass
0.080395 1      0      exp2
0.191968 0.18   0      exp_stl
0.090972 0.7    0      powx_ekmett_fast_precise
0.090459 0.71   0      powx_ekmett_fast_better_precise
0.079863 1.02          desoras_pos
0.082704 0.91   0.15   exp_mineiro
0.080687 0.98   0      powx_stl
0.078116 1.1    0.15   mineiro              -- amazing at all ranges
0.066564 2.23   600    exp_mineiro_faster
0.065485 2.47   1000   exp_ekmett_ub
0.065346 2.51   600    exp_schraudolph
0.063016 3.27   bad    powx_ekmett_fast_ub
0.062933 3.31   bad    powx_ekmett_fast
0.062901 3.32   1000   powx_ekmett_fast_lb
0.062945 3.3    600    schraudolph
0.062359 3.58   600    mineiro_faster

- pass = no processing
- stl = exp2
- xSpeed of the exp2 function calculated: (exp2 - pass) / (other_sec - pass)
- Error is in Hz
"""

class Styles:
    idx = 0
    types = ['solid', 'dotted', 'dashed', 'dashdot']

    def get(self):
        s = self.types[self.idx]
        self.idx = (self.idx + 1) & 3
        return s

linestyles = Styles()

fig, ax = plt.subplots()

x_labels = [
        0.0, 0.025, 0.05, 0.075,
        0.1, 0.125, 0.15, 0.175,
        0.2, 0.225, 0.25, 0.275,
        0.3, 0.325, 0.35, 0.375,
        0.4, 0.425, 0.45, 0.475,
        0.5, 0.525, 0.55, 0.575,
        0.6, 0.625, 0.65, 0.675,
        0.7, 0.725, 0.75, 0.775,
        0.8, 0.825, 0.85, 0.875,
        0.9, 0.925, 0.95, 0.975,
        1.0,
]
x_ticks = [i for i in range(len(x_labels))]

plt.xlabel('Normalised Position')
plt.xticks(ticks=x_ticks, labels=x_labels)
plt.ylabel('Hz')

exp2 = [20.0,23.784141540527,28.284271240234,33.635856628418,40.0,47.568283081055,56.568542480469,67.271713256836,80.0,95.136566162109,113.137084960938,134.543426513672,160.0,190.273132324219,226.274169921875,269.086853027344,320.0,380.546264648438,452.54833984375,538.173706054688,640.0,761.092529296875,905.0966796875,1076.347412109375,1280.0,1522.18505859375,1810.193359375,2152.69482421875,2560.0,3044.3701171875,3620.38671875,4305.3896484375,5120.0,6088.740234375,7240.7734375,8610.779296875,10240.0,12177.48046875,14481.546875,17221.55859375,20480.0,]
mineiro = [20.0,23.783264160156,28.284454345703,33.634948730469,40.0,47.566528320312,56.568603515625,67.269897460938,80.0,95.133056640625,113.13720703125,134.539794921875,160.0,190.26611328125,226.2744140625,269.07958984375,320.0,380.5322265625,452.548828125,538.1591796875,640.0,761.064453125,905.09765625,1076.318359375,1280.0,1522.12890625,1810.1953125,2152.6171875,2559.98046875,3044.2578125,3620.3515625,4305.234375,5119.9609375,6088.515625,7240.703125,8610.46875,10239.921875,12177.03125,14481.40625,17220.9375,20479.84375,]
mineiro_faster = [19.426956176758,23.853912353516,28.853912353516,33.853912353516,38.853912353516,47.70751953125,57.70751953125,67.70751953125,77.70751953125,95.4150390625,115.4150390625,135.4150390625,155.4150390625,190.830078125,230.830078125,270.830078125,310.830078125,381.66015625,461.66015625,541.66015625,621.66015625,763.3203125,923.3203125,1083.3203125,1243.3203125,1526.640625,1846.640625,2166.640625,2486.640625,3053.28125,3693.28125,4333.28125,4973.28125,6106.5625,7386.5625,8666.5625,9946.5625,12213.125,14773.125,17333.125,19893.125,]
schraudolph = [19.420166015625,23.84033203125,28.84033203125,33.84033203125,38.84033203125,47.6806640625,57.6806640625,67.6806640625,77.6806640625,95.361328125,115.361328125,135.361328125,155.361328125,190.72265625,230.72265625,270.72265625,310.72265625,381.4453125,461.4453125,541.4453125,621.4453125,762.890625,922.890625,1082.890625,1242.890625,1525.78125,1845.78125,2165.78125,2485.78125,3051.5625,3691.5625,4331.5625,4971.5625,6103.125,7383.125,8663.125,9943.125,12206.25,14766.25,17326.25,19886.25,]
desoras_pos = [20.0,25.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,100.0,120.0,140.0,160.0,200.0,240.0,280.0,320.0,400.0,480.0,560.0,640.0,800.0,960.0,1120.0,1280.0,1600.0,1920.0,2240.0,2560.0,3200.0,3840.0,4480.0,5120.0,6400.0,7680.0,8960.0,10240.0,12800.0,15360.0,17920.0,20480.0,]
powx_stl = [20.0,23.784141540527,28.284271240234,33.635856628418,40.0,47.568283081055,56.568542480469,67.271713256836,80.0,95.136566162109,113.137084960938,134.543426513672,160.0,190.273132324219,226.274169921875,269.086853027344,320.0,380.546264648438,452.54833984375,538.173706054688,640.0,761.092529296875,905.0966796875,1076.347412109375,1280.0,1522.18505859375,1810.193359375,2152.69482421875,2560.0,3044.3701171875,3620.38671875,4305.3896484375,5120.0,6088.740234375,7240.7734375,8610.779296875,10240.0,12177.48046875,14481.546875,17221.55859375,20480.0,]
powx_ekmett_fast = [19.420166015625,24.130249023438,29.420166015625,34.710083007812,40.0,50.579833984375,61.15966796875,71.739501953125,84.638671875,105.79833984375,126.9580078125,148.11767578125,178.5546875,220.8740234375,263.193359375,305.5126953125,375.6640625,460.302734375,544.94140625,629.580078125,788.4375,957.71484375,1126.9921875,1312.5390625,1651.09375,1989.66796875,2328.22265625,2773.5546875,3450.6640625,4127.7734375,4804.8828125,5843.984375,7198.203125,8552.421875,9906.640625,12281.71875,14990.15625,17698.59375,20407.03125,25750.9375,31167.8125,]
powx_ekmett_fast_lb = [19.139251708984,23.278503417969,28.278503417969,33.278503417969,38.278503417969,46.557006835938,56.557006835938,66.557006835938,76.557006835938,93.114013671875,113.114013671875,133.114013671875,153.114013671875,186.22802734375,226.22802734375,266.22802734375,306.22802734375,372.4560546875,452.4560546875,532.4560546875,612.4560546875,744.912109375,904.912109375,1064.912109375,1224.912109375,1489.82421875,1809.82421875,2129.82421875,2449.82421875,2979.6484375,3619.6484375,4259.6484375,4899.6484375,5959.296875,7239.296875,8519.296875,9799.296875,11918.59375,14478.59375,17038.59375,19598.59375,]
powx_ekmett_fast_ub = [20.0,25.430297851562,30.860748291016,36.291046142578,43.442993164062,54.303588867188,65.164184570312,76.024780273438,93.77197265625,115.4931640625,137.21435546875,158.935546875,201.3134765625,244.75830078125,288.20068359375,343.2861328125,430.1708984375,517.0556640625,603.9404296875,741.66015625,915.4296875,1089.19921875,1262.96875,1593.4765625,1941.03515625,2288.57421875,2712.2265625,3407.3046875,4102.3828125,4797.5,5865.15625,7255.3125,8645.46875,10035.625,12611.71875,15392.03125,18172.34375,21425.3125,26985.9375,32546.875,38107.5,]
powx_ekmett_fast_precise = [20.0,25.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,100.0,120.0,140.0,160.0,200.0,240.0,280.0,320.0,400.0,480.0,560.0,640.0,800.0,960.0,1120.0,1280.0,1600.0,1920.0,2240.0,2560.0,3200.0,3840.0,4480.0,5120.0,6400.0,7680.0,8960.0,10240.0,12800.0,15360.0,17920.0,20480.0,]
powx_ekmett_fast_better_precise = [20.0,25.483680725098,32.951416015625,42.34162902832,40.0,50.967361450195,65.90283203125,84.683258056641,80.0,101.934722900391,131.8056640625,169.366516113281,160.0,203.869445800781,263.611328125,338.733032226562,320.0,407.738891601562,527.22265625,677.466064453125,640.0,815.477783203125,1054.4453125,1354.93212890625,1280.0,1630.95556640625,2108.890625,2709.8642578125,2560.0,3261.9111328125,4217.78125,5419.728515625,5120.0,6523.822265625,8435.5625,10839.45703125,10240.0,13047.64453125,16871.125,21678.9140625,20480.0,]
exp_stl = [20.0,23.784141540527,28.284271240234,33.635856628418,40.0,47.568283081055,56.568542480469,67.271713256836,80.0,95.136566162109,113.137084960938,134.543426513672,160.0,190.273162841797,226.274169921875,269.086822509766,320.0,380.546325683594,452.54833984375,538.173645019531,640.0,761.092651367188,905.0966796875,1076.347290039062,1280.0,1522.185302734375,1810.19384765625,2152.694580078125,2560.0,3044.37060546875,3620.385986328125,4305.38916015625,5120.0,6088.7412109375,7240.775390625,8610.7783203125,10240.0,12177.482421875,14481.5439453125,17221.556640625,20480.0,]
exp_ekmett_ub = [20.0,25.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,100.0,120.0,140.0,160.0,200.0,240.0,280.0,320.0,400.0,480.0,560.0,640.0,800.0,960.0,1120.0,1280.0,1600.0,1920.0,2240.0,2560.0,3200.0,3840.0,4480.0,5120.0,6400.0,7680.0,8960.0,10240.0,12800.0,15360.0,17920.0,20480.0,]
exp_schraudolph = [19.420166015625,23.84033203125,28.84033203125,33.84033203125,38.84033203125,47.6806640625,57.6806640625,67.6806640625,77.6806640625,95.361328125,115.361328125,135.361328125,155.361328125,190.72265625,230.72265625,270.72265625,310.72265625,381.4453125,461.4453125,541.4453125,621.4453125,762.890625,922.890625,1082.890625,1242.890625,1525.78125,1845.78125,2165.78125,2485.78125,3051.5625,3691.5625,4331.5625,4971.5625,6103.125,7383.125,8663.125,9943.125,12206.25,14766.25,17326.25,19886.25,]
exp_mineiro = [20.0,23.783264160156,28.284454345703,33.634948730469,40.0,47.566528320312,56.568603515625,67.269897460938,80.0,95.133056640625,113.13720703125,134.539794921875,160.0,190.26611328125,226.2744140625,269.07958984375,320.0,380.5322265625,452.548828125,538.1591796875,640.0,761.064453125,905.09765625,1076.318359375,1280.0,1522.12890625,1810.1953125,2152.6171875,2559.98046875,3044.2578125,3620.3515625,4305.234375,5119.9609375,6088.515625,7240.703125,8610.46875,10239.921875,12177.03125,14481.40625,17220.9375,20479.84375,]
exp_mineiro_faster = [19.426956176758,23.853912353516,28.853912353516,33.853912353516,38.853912353516,47.70751953125,57.70751953125,67.70751953125,77.70751953125,95.4150390625,115.4150390625,135.4150390625,155.4150390625,190.83251953125,230.830078125,270.830078125,310.830078125,381.66015625,461.66015625,541.66015625,621.66015625,763.3203125,923.3203125,1083.3203125,1243.3203125,1526.640625,1846.66015625,2166.640625,2486.640625,3053.28125,3693.28125,4333.28125,4973.28125,6106.5625,7386.5625,8666.5625,9946.5625,12213.125,14773.125,17333.125,19893.125,]

x = [i for i in range(len(exp2))]

ax.plot(exp2, label='exp2', linestyle=linestyles.get())
ax.plot(mineiro, label='mineiro', linestyle=linestyles.get())
ax.plot(mineiro_faster, label='mineiro_faster', linestyle=linestyles.get())
ax.plot(schraudolph, label='schraudolph', linestyle=linestyles.get())
# ax.plot(desoras_pos, label='desoras_pos', linestyle=linestyles.get())
# ax.plot(powx_stl, label='powx_stl', linestyle=linestyles.get())
# ax.plot(powx_ekmett_fast, label='powx_ekmett_fast', linestyle=linestyles.get())
# ax.plot(powx_ekmett_fast_lb, label='powx_ekmett_fast_lb', linestyle=linestyles.get())
# ax.plot(powx_ekmett_fast_ub, label='powx_ekmett_fast_ub', linestyle=linestyles.get())
# ax.plot(powx_ekmett_fast_precise, label='powx_ekmett_fast_precise', linestyle=linestyles.get())
# ax.plot(powx_ekmett_fast_better_precise, label='powx_ekmett_fast_better_precise', linestyle=linestyles.get())
# ax.plot(exp_stl, label='exp_stl', linestyle=linestyles.get())
# ax.plot(exp_ekmett_ub, label='exp_ekmett_ub', linestyle=linestyles.get())
# ax.plot(exp_schraudolph, label='exp_schraudolph', linestyle=linestyles.get())
# ax.plot(exp_mineiro, label='exp_mineiro', linestyle=linestyles.get())
# ax.plot(exp_mineiro_faster, label='exp_mineiro_faster', linestyle=linestyles.get())

ax.legend()
plt.show()
