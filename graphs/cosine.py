import matplotlib.pyplot as plt
import numpy as np
import math

"""
Cos functions can be used in trigonometry, filter
coefficients, and saturation algorithms.

High precision is needed in generating filter coefficients,
so pade is the only viable option, however it should be
tested how much it effects the cutoff.
For displaying a magnitude graph of a filters cutoff, you
may be able to get away with the very fast functions. The
inputs to cos functions are often well below π which is
where these approximations are most accurate. The func
mineiro_faster is likely a great choice, and perhaps
milianw_precise, however their errors should be plotted
before using them.

In trigonometry for graphics, the fast mineiro_faster
algorithm yields fantastic speed and precision. It is bad
after +/- π, however most right angle triangle trig use
angles less than 90deg. In other contexts, milianw is a great
function as it cycles and is cheap to process

In saturation, error will result in different tones, so you
should experiment with the sound of different funcs that suit
your needs. For cycling funcs, milianw and milianw_precise
should work great.

The following table compares the speed and error margin of
different cos approxiamtions used in the following formula:
    cos(x)

SEC      xSPEED ERROR     NAME
0.055628                  pass
0.118301        0         stl
0.082529 2.32   0.000015  mineiro         -- bad close to +/- 2π
0.077439 2.87   0.00001   pade            -- bad close to +/- 2π
0.079035 2.67   0.00055   milianw_precise -- cycles well. slightly accurate
0.071404 3.97   0.043     milianw         -- cycles well. slightly rough
0.069655 4.46   0.0054    mineiro_faster  -- bad after +/-π
0.064191 7.31   bad       juha            -- bad before -π. decent up to 1.5π

- pass = no processing
- stl = cos(x)
- xSpeed of the cos function calculated: (stl - pass) / (other_sec - pass)
- Error is is taken at the worst point within +/- π, excexpt for the full cosine
  function, where is error is taken anywhere that looks bad
"""

stl = [1.000000000000,0.923879563808,0.707106828690,0.382683306932,-0.000000290067,-0.382683843374,-0.707106530666,-0.923879444599,-1.000000000000,-0.923879444599,-0.707106590271,-0.382683008909,0.000000139071,0.382683277130,0.707106769085,0.923879563808,1.000000000000,0.923879504204,0.707106649876,0.382683604956,0.000000011925,-0.382683575153,-0.707106828690,-0.923879504204,-1.000000000000,-0.923879504204,-0.707106769085,-0.382683396339,-0.000000043711,0.382683426142,0.707106769085,0.923879504204,1.000000000000,0.923879504204,0.707106769085,0.382683426142,-0.000000043711,-0.382683396339,-0.707106769085,-0.923879504204,-1.000000000000,-0.923879504204,-0.707106828690,-0.382683575153,0.000000011925,0.382683604956,0.707106649876,0.923879504204,1.000000000000,0.923879563808,0.707106769085,0.382683277130,0.000000139071,-0.382683008909,-0.707106590271,-0.923879444599,-1.000000000000,-0.923879444599,-0.707106530666,-0.382683843374,-0.000000290067,0.382683306932,0.707106828690,0.923879563808,1.000000000000,]
pade = [-29.586977005005,-26.955038070679,-24.308603286743,-21.664678573608,-19.043243408203,-16.467382431030,-13.963229179382,-11.559699058533,-9.287981033325,-7.180664062500,-5.270432949066,-3.588338375092,-2.161610603333,-1.011082053185,-0.148441568017,0.426434338093,0.727641284466,0.784421980381,0.640869975090,0.353787839413,-0.011441354640,-0.386733770370,-0.708364546299,-0.924213588238,-1.000073552132,-0.923892438412,-0.707108378410,-0.382683575153,-0.000000094781,0.382683455944,0.707106769085,0.923879623413,1.000000000000,0.923879623413,0.707106769085,0.382683455944,-0.000000094781,-0.382683575153,-0.707108378410,-0.923892438412,-1.000073552132,-0.924213588238,-0.708364546299,-0.386733770370,-0.011441354640,0.353787839413,0.640869975090,0.784421980381,0.727641284466,0.426434338093,-0.148441568017,-1.011082053185,-2.161610603333,-3.588338375092,-5.270432949066,-7.180664062500,-9.287981033325,-11.559699058533,-13.963229179382,-16.467382431030,-19.043243408203,-21.664678573608,-24.308603286743,-26.955038070679,-29.586977005005,]
milianw = [1.000000000000,0.937500000000,0.749999523163,0.437499284744,-0.000000953674,-0.437500715256,-0.750000000000,-0.937500000000,-1.000000000000,-0.937499761581,-0.749999523163,-0.437499284744,0.000000953674,0.437500000000,0.750000000000,0.937500238419,1.000000000000,0.937499880791,0.749999761581,0.437500000000,-0.000000000000,-0.437500357628,-0.750000238419,-0.937500000000,-1.000000000000,-0.937499940395,-0.750000000000,-0.437499821186,-0.000000000000,0.437500000000,0.750000000000,0.937500000000,1.000000000000,0.937500000000,0.750000000000,0.437500000000,-0.000000000000,-0.437499821186,-0.750000000000,-0.937499940395,-1.000000000000,-0.937500000000,-0.750000238419,-0.437500357628,-0.000000000000,0.437500000000,0.749999761581,0.937499880791,1.000000000000,0.937500238419,0.750000000000,0.437500000000,0.000000953674,-0.437499284744,-0.749999523163,-0.937499761581,-1.000000000000,-0.937500000000,-0.750000000000,-0.437500715256,-0.000000953674,0.437499284744,0.749999523163,0.937500000000,1.000000000000,]
milianw_precise = [1.000000000000,0.924316406250,0.707811951637,0.382128208876,-0.000000739098,-0.382129609585,-0.707812488079,-0.924316406250,-1.000000000000,-0.924316108227,-0.707811951637,-0.382128208876,0.000000739098,0.382128894329,0.707812488079,0.924316704273,1.000000000000,0.924316287041,0.707812249660,0.382128894329,0.000000000000,-0.382129251957,-0.707812786102,-0.924316406250,-1.000000000000,-0.924316346645,-0.707812488079,-0.382128745317,0.000000000000,0.382128894329,0.707812488079,0.924316406250,1.000000000000,0.924316406250,0.707812488079,0.382128894329,0.000000000000,-0.382128745317,-0.707812488079,-0.924316346645,-1.000000000000,-0.924316406250,-0.707812786102,-0.382129251957,0.000000000000,0.382128894329,0.707812249660,0.924316287041,1.000000000000,0.924316704273,0.707812488079,0.382128894329,0.000000739098,-0.382128208876,-0.707811951637,-0.924316108227,-1.000000000000,-0.924316406250,-0.707812488079,-0.382129609585,-0.000000739098,0.382128208876,0.707811951637,0.924316406250,1.000000000000,]
juha = [-63.000000000000,-59.062500000000,-55.250000000000,-51.562500000000,-47.999992370605,-44.562492370605,-41.250000000000,-38.062500000000,-35.000000000000,-32.062496185303,-29.249994277954,-26.562494277954,-23.999996185303,-21.562500000000,-19.250000000000,-17.062496185303,-15.000000000000,-13.062500000000,-11.250000000000,-9.562500000000,-8.000000000000,-6.562498569489,-5.249999046326,-4.062500000000,-3.000000000000,-2.062500000000,-1.250000000000,-0.562500000000,0.000000000000,0.437500000000,0.750000000000,0.937500000000,1.000000000000,0.937500000000,0.750000000000,0.437500000000,0.000000000000,-0.437499821186,-0.750000000000,-0.937499940395,-1.000000000000,-0.937500000000,-0.750000238419,-0.437500357628,-0.000000000000,0.562500000000,1.249999284744,2.062499284744,3.000000000000,4.062498092651,5.250000000000,6.562500000000,7.999997138977,9.562497138977,11.249997138977,13.062496185303,15.000000000000,17.062500000000,19.250000000000,21.562496185303,23.999996185303,26.562494277954,29.249994277954,32.062500000000,35.000000000000,]
mineiro = [5901065.000000000000,3484812.250000000000,2006961.000000000000,1124276.375000000000,610730.000000000000,320544.312500000000,161842.468750000000,78189.406250000000,35907.546875000000,15544.092773437500,6273.890136718750,2326.371826171875,776.073181152344,225.732910156250,54.493064880371,10.192784309387,1.644728183746,0.726024925709,0.637736558914,0.375405341387,0.000000000000,-0.382704228163,-0.707092881203,-0.923892557621,-0.999986410141,-0.923892557621,-0.707092821598,-0.382703930140,0.000000000000,0.382704049349,0.707092881203,0.923892736435,0.999986410141,0.923892557621,0.707092881203,0.382703542709,-0.000000374052,-0.382703542709,-0.707092881203,-0.923892557621,-0.999986529350,-0.923892736435,-0.707093000412,-0.382704108953,0.000000000000,0.382704108953,0.707092761993,0.923892736435,0.999986767769,0.923892736435,0.707092881203,0.382703542709,0.000000000000,-0.375405102968,-0.637736558914,-0.726024925709,-1.644728183746,-10.192822456360,-54.493167877197,-225.732360839844,-776.073181152344,-2326.371826171875,-6273.893066406250,-15544.102539062500,-35907.593750000000,]
mineiro_faster = [176.594879150391,157.609436035156,140.007049560547,123.736572265625,108.746780395508,94.986404418945,82.404251098633,70.949050903320,60.569602966309,51.214668273926,42.833045959473,35.373493194580,28.784790039062,23.015716552734,18.015026092529,13.731494903564,10.113920211792,7.111050605774,4.671673774719,2.744559764862,1.278480052948,0.222210049629,-0.475475430489,-0.865803122520,-1.000000000000,-0.929291784763,-0.704905033112,-0.378065466881,0.000000000000,0.378065645695,0.704905033112,0.929291844368,1.000000000000,0.929291844368,0.704905033112,0.378065645695,0.000000000000,-0.378065466881,-0.704905033112,-0.929291784763,-1.000000000000,-0.865803122520,-0.475475430489,0.222210049629,1.278480052948,2.744559764862,4.671673774719,7.111050605774,10.113920211792,13.731494903564,18.015026092529,23.015716552734,28.784790039062,35.373493194580,42.833045959473,51.214668273926,60.569602966309,70.949050903320,82.404251098633,94.986404418945,108.746780395508,123.736572265625,140.007049560547,157.609436035156,176.594879150391,]


x_labels = [
    '-4', '', '-3 3/4', '', '-3 1/2', '', '-3 1/4', '',
    '-3', '', '-2 3/4', '', '-2 1/2', '', '-2 1/4', '',
    '-2', '', '-1 3/4', '', '-1 1/2', '', '-1 1/4', '',
    '-π', '', '-3/4', '', '-π/2', '', '-π/4', '',
    '0', '', 'π/4', '', 'π/2', '', '3/4', '',
    'π', '', '1 1/4', '', '1 1/2', '', '1 3/4', '',
    '2', '', '2 1/4', '', '2 1/2', '', '2 3/4', '',
    '3', '', '3 1/4', '', '3 1/2', '', '3 3/4', '',
    '4',
]

class Styles:
    idx = 0
    types = ['solid', 'dotted', 'dashed', 'dashdot']

    def get(self):
        s = self.types[self.idx]
        self.idx = (self.idx + 1) & 3
        return s

linestyles = Styles()

fig, ax = plt.subplots()

x_ticks = [i for i in range(len(x_labels))]
x = [i for i in range(len(stl))]

# plt.xlabel('phase 0-1')
plt.xticks(ticks=x_ticks, labels=x_labels)
plt.ylabel('mag')
plt.ylim(-1, 1)
plt.xlim(left=(-1.5 * math.pi), right=(1.5 * math.pi))

ax.plot(stl, label='stl', linestyle=linestyles.get())
ax.plot(pade, label='pade', linestyle=linestyles.get())
ax.plot(milianw, label='milianw', linestyle=linestyles.get())
ax.plot(milianw_precise, label='milianw_precise', linestyle=linestyles.get())
# ax.plot(juha, label='juha', linestyle=linestyles.get())
ax.plot(mineiro, label='mineiro', linestyle=linestyles.get())
ax.plot(mineiro_faster, label='mineiro_faster', linestyle=linestyles.get())


ax.legend()
plt.show()
