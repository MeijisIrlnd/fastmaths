import matplotlib.pyplot as plt
import numpy as np
import math

"""
tan is popular in calculating filter coefficients.

In generating filter coefficients, high accuracy is needed
else the cutoff could be too far from it's desired position.
Generally tan in used like this:
    π * fc / fs
If fs (sample rate) is 44100 and the cutoff is 20kHz, the
maximum value ever to go into the function will be 1.424758
It should be noted that at higher sample rates min & max
inputs into the function will be lower.

Most approximations here have tiny errors, so the fastest
functions kay & kay_precise can be used with confidence.

A special mention should be made for the jrus algorithms,
they expect inputs between 0-1 rather than 0-π/2 (1.57).
The denormalising (* 0.636) operation has been counted in
the bench, and when removed, the jrus_alt function
performs at the same speed as the kay function. The
normalising in jrus_alt becomes a feature, because when
using tan for an algorithm like tan(π * fc / 44100), it
can be optimised to be jrus_alt(fc * inv_nyquist) where
inv_nyquist = 1 / (44100 / 2)

The following table compares the speed and error margin of
different tan approxiamtions used in the following formula:
    (calc g)
    x = value representing Hz
    g = tan(π * x / 44100)

SEC      xSPEED ERROR               NAME
0.055474                            pass
0.116913 1      +0.00139471496      stl         -- still has rounding errors when using inverse g function
0.096169 1.51   +0..00068600408     jrus_full_denorm
0.085327 2.05   bad                 wildmagic1  -- bad after 17k
0.076044 2.98   +0.00196168308      jrus_denorm
0.075524 3.06   +0.000969488377     pade        -- cycles well. accurate
0.073580 3.39   +0.156165502        jrus_alt_denorm
0.068136 4.85   -1.0091539572531474 kay         --
0.068053 4.88   -1.0091539572531474 kay_precise -- uses 1 extra unique constant for no gain within our range
0.067788 4.98   bad                 wildmagic0  -- bad after 13k

- pass = no processing
- stl = tan(x)
- xSpeed of the tan function calculated: (stl - pass) / (other_sec - pass)
- Error is in Hz, taking the value at 20kHz using the formula
    atan(y) / π * 41'000 - 20'000
"""

stl = [0.000712379406,0.001424759510,0.002137141069,0.002849524841,0.003561911639,0.004274301697,0.004986696877,0.005699096248,0.006411501672,0.007123913616,0.014248549938,0.021374633536,0.028502887115,0.035634037107,0.042768806219,0.049907930195,0.057052124292,0.064202129841,0.071358680725,0.143447801471,0.217028051615,0.292923182249,0.372058898211,0.455511212349,0.544570982456,0.640832304955,0.746319413185,0.863674342632,0.996444404125,1.149541258812,1.329999446869,1.548302888870,1.820836424828,2.174767971039,2.658732414246,3.369331836700,4.529793262482,6.798800468445,]
pade = [0.000712379348,0.001424759510,0.002137140837,0.002849524608,0.003561911639,0.004274301697,0.004986696411,0.005699096248,0.006411501206,0.007123914082,0.014248549938,0.021374633536,0.028502888978,0.035634037107,0.042768806219,0.049907930195,0.057052120566,0.064202137291,0.071358688176,0.143447816372,0.217028066516,0.292923182249,0.372058928013,0.455511212349,0.544570982456,0.640832364559,0.746319353580,0.863674283028,0.996444463730,1.149541258812,1.329999327660,1.548303008080,1.820836424828,2.174767971039,2.658732175827,3.369331359863,4.529793262482,6.798799037933,]
wildmagic0 = [0.000712379348,0.001424759394,0.002137140837,0.002849524608,0.003561910940,0.004274300765,0.004986694548,0.005699093454,0.006411497947,0.007123907562,0.014248505235,0.021374480799,0.028502522036,0.035633325577,0.042767584324,0.049905996770,0.057049244642,0.064198054373,0.071353100240,0.143406197429,0.216904059052,0.292680919170,0.371705383062,0.455124944448,0.544311106205,0.640903651714,0.746855795383,0.864479124546,0.996487438679,1.146042585373,1.316798567772,1.512946605682,1.739259839058,2.001137256622,2.304651260376,2.656587123871,3.064494132996,3.536726713181,]
wildmagic1 = [0.000712379348,0.001424759626,0.002137141069,0.002849525074,0.003561911406,0.004274301697,0.004986696877,0.005699096248,0.006411501672,0.007123913616,0.014248550870,0.021374633536,0.028502887115,0.035634033382,0.042768806219,0.049907926470,0.057052128017,0.064202129841,0.071358680725,0.143447816372,0.217028051615,0.292923182249,0.372058868408,0.455511242151,0.544570982456,0.640832304955,0.746319413185,0.863674342632,0.996444463730,1.149538159370,1.329957604408,1.547996878624,1.819203615189,2.167570352554,2.630675554276,3.267831563950,4.172825813293,5.493455410004,]
jrus_alt_denorm = [0.000712373003,0.001424746704,0.002137121977,0.002849499229,0.003561879508,0.004274263047,0.004986651707,0.005699045025,0.006411443464,0.007123849820,0.014248422347,0.021374441683,0.028502633795,0.035633720458,0.042768433690,0.049907494336,0.057051632553,0.064201585948,0.071358084679,0.143446847796,0.217027187347,0.292922943830,0.372059971094,0.455514162779,0.544576048851,0.640839517117,0.746327996254,0.863682925701,0.996450662613,1.149542212486,1.329990625381,1.548280000687,1.820796370506,2.174710750580,2.658667802811,3.369294166565,4.529881477356,6.799321174622,]
jrus_denorm = [0.000712379406,0.001424759626,0.002137141302,0.002849524841,0.003561911639,0.004274301697,0.004986696877,0.005699096248,0.006411501672,0.007123913616,0.014248550870,0.021374635398,0.028502887115,0.035634037107,0.042768806219,0.049907930195,0.057052124292,0.064202129841,0.071358680725,0.143447831273,0.217028066516,0.292923182249,0.372058898211,0.455511242151,0.544571042061,0.640832364559,0.746319353580,0.863674342632,0.996444404125,1.149541258812,1.329999327660,1.548302888870,1.820836186409,2.174768209457,2.658732175827,3.369330883026,4.529793262482,6.798802375793,]
jrus_full_denorm = [0.000712379348,0.001424759510,0.002137141069,0.002849524608,0.003561911406,0.004274301231,0.004986696411,0.005699095782,0.006411501206,0.007123913616,0.014248549938,0.021374633536,0.028502887115,0.035634033382,0.042768802494,0.049907930195,0.057052124292,0.064202122390,0.071358680725,0.143447801471,0.217028051615,0.292923182249,0.372058868408,0.455511212349,0.544570982456,0.640832304955,0.746319413185,0.863674283028,0.996444344521,1.149541258812,1.329999327660,1.548302531242,1.820836186409,2.174767971039,2.658732175827,3.369331121445,4.529791831970,6.798798084259,]
kay = [0.000712379406,0.001424759510,0.002137140837,0.002849524841,0.003561911173,0.004274301231,0.004986695945,0.005699094851,0.006411499809,0.007123912219,0.014248536900,0.021374586970,0.028502775356,0.035633817315,0.042768429965,0.049907326698,0.057051230222,0.064200863242,0.071356937289,0.143433868885,0.216980904341,0.292811244726,0.371839851141,0.455131947994,0.543967068195,0.639928102493,0.745027303696,0.861894965172,0.994065701962,1.146438121796,1.326033115387,1.543320894241,1.814670801163,2.167235136032,2.649631977081,3.358446121216,4.516886234283,6.783615112305,]
kay_precise = [0.000713617250,0.001427235315,0.002140854485,0.002854476450,0.003568100743,0.004281728528,0.004995360970,0.005708998069,0.006422641221,0.007136291359,0.014273293316,0.021411728114,0.028552304953,0.035695735365,0.042842749506,0.049994055182,0.057150367647,0.064312413335,0.071480929852,0.143683105707,0.217357933521,0.293320029974,0.372485995293,0.455922782421,0.544912278652,0.641040086746,0.746321976185,0.863392651081,0.995792984962,1.148430347443,1.328337430954,1.546002626419,1.817824125290,2.171000719070,2.654236316681,3.364281654358,4.524734973907,6.795402526855,]


x_labels = [
    10, 20, 30, 40, 50, 60, 70, 80, 90,
    100, 200, 300, 400, 500, 600, 700, 800, 900,
    '1k', '2k', '3k', '4k', '5k', '6k', '7k', '8k', '9k',
    '10k', '11k', '12k', '13k', '14k', '15k', '16k', '17k', '18k', '19k',
    '20k'
]

class Styles:
    idx = 0
    types = ['solid', 'dotted', 'dashed', 'dashdot']

    def get(self):
        s = self.types[self.idx]
        self.idx = (self.idx + 1) & 3
        return s

linestyles = Styles()

fig, ax = plt.subplots()

x_ticks = [i for i in range(len(x_labels))]
x = [i for i in range(len(stl))]

plt.xlabel('Frequency in Hz')
plt.xticks(ticks=x_ticks, labels=x_labels)


ax.plot(stl, label='stl', linestyle=linestyles.get())
ax.plot(pade, label='pade', linestyle=linestyles.get())
ax.plot(wildmagic0, label='wildmagic0', linestyle=linestyles.get())
ax.plot(wildmagic1, label='wildmagic1', linestyle=linestyles.get())
ax.plot(jrus_alt_denorm, label='jrus_alt_denorm', linestyle=linestyles.get())
ax.plot(jrus_denorm, label='jrus_denorm', linestyle=linestyles.get())
ax.plot(jrus_full_denorm, label='jrus_full_denorm', linestyle=linestyles.get())
ax.plot(kay, label='kay', linestyle=linestyles.get())
ax.plot(kay_precise, label='kay_precise', linestyle=linestyles.get())

ax.legend()
plt.show()
